// -------------------------------------------- //
//                                              //
//  aleung-c engine README                      //
//                                              //
// -------------------------------------------- //

Summary:

    I. Installing the engine.
    II. Using the engine.
        a. Starting the code.
        b. Set the camera.
        c. Putting objects on our screen.
        d. Differents objects, different uses.
        e. Texturing the objects on runtime.
        f. Collisions.
    III. Credits.

This game engine is an overlay of classes and functions that can be put in code to
create simple 3d opengl programs. It will handle opengl related calls and
memory handling, to allow the gameplay side to just call some lines of code to
put 3d model and 2d pictures on the screen.


I. Installing the engine.

This small engine comes in the form a static library: libaleung-c_engine.a
The makefile in the folder compiles the .a lib.

To compile this engine with your program, you MUST link your program to the libraries used in the engine.
They are the following:

GLFW 3.2.1
OpenGL 4.1
freetype 2.4.0

This means that when you compile your program, you should have several lines added.
These are the lines added to compiling on macOS Sierra 10.12.1 :

    # Linking opengl
    -framework OpenGL
    # Linking Ios window related frameworks
    -framework Cocoa -framework CoreVideo -framework IOKit
    # Linking GLUT and GLFW.
    -framework GLUT -L./aleung-c_engine/glfw-3.2.1/src -lglfw3


    # For freetype true font loading library
    -L./aleung-c_engine/freetype-2.4.0/objs -lfreetype
    # This one is needed in the .cpp to .o conversion, as freetype 2 is also a static lib, and requires an additionnal .I link.
    -I./aleung-c_engine/freetype-2.4.0/include

And finally the engine linking:

    -L./aleung-c_engine/ -laleung-c_engine


This gives in my example the following makefile compilation lines (then again, macOS):

    [...]

    SRC = ...

    OBJ = $(SRC:.cpp=.o)

    GL = -framework OpenGL
    GLFW = -framework Cocoa -framework CoreVideo -framework IOKit -framework GLUT -L./aleung-c_engine/glfw-3.2.1/src -lglfw3

    # For freetype true font loading library
    FREETYPE2_L = -L./aleung-c_engine/freetype-2.4.0/objs -lfreetype
    FREETYPE2_I = -I./aleung-c_engine/freetype-2.4.0/include

    CC = clang++ -g -Wall -Werror -Wextra $(FREETYPE2_I)

    ENGINE_DIR = ./aleung-c_engine/
    ENGINE_L = -L./aleung-c_engine/ -laleung-c_engine

    # ----- Makefile rules -----
    all: engine $(NAME)

    $(NAME): $(OBJ)
        $(CC) -o $(NAME) $(OBJ) $(GL) $(GLFW) $(FREETYPE2_L) $(ENGINE_L)

    engine:
        make -C $(ENGINE_DIR)

    %.o: %.cpp
        $(CC) -o $@ -c $<

    [...]

II. Using the engine.

    a. Starting the code.

Once the engine is linked, congratulations! That was the toughest part.
To use the engine, you must before almost everything else init the engine like this:

    GameEngineController    GameEngine;

    GameEngine->Init(WINDOW_WIDTH, WINDOW_HEIGHT, WINDOW_NAME);

This will create a window with the specified arguments.
Then, you should have a main loop such as this:

    Game.InitGame();
    while (!glfwWindowShouldClose(GameEngine->Window))
    {
        glfwPollEvents();

        Game.Update();
        GameEngine->Draw();
        Game.LateUpdate();
    }

"Game" being an imaginary class where you will code your gameplay.

Know that as you code, you always have access to the instance of the engine with:

     GameEngineController::Instance()

It is a singleton, accessible wherever you need it.
Also, there is a Settings Component on the engine, where you can
set all engine related variables, such as the antialiasing value:

    GameEngine.Settings.AntiAliasingValue = 4;

    b. Set the camera.

To get access to the camera, the engine has these public methods:

	GameObject	*GetCamera();
	glm::vec3	*GetCameraLookAtVec3();
	void		SetCamera(GameObject *NewCamera);
	void		SetCameraLookAt(glm::vec3 new_look_pos);

Use them to stock or replace the engine's default camera for gameplay purpose,
until I get motivated to make a better user set camera.

    c. Putting objects on our screen.

To put an object in the world, you should just do this:

    GameObject *Character = new GameObject("Character", "./ressources/Model.obj");
    Character->Transform.Position = glm::vec3(3.0, 0.0, 0.0);

This will put the object in the engine's list of object, and draw it when 
asked.
If you want to simply texture this object, you must have a texture with
the same name as the obj in the same folder, with only the extension modified in bmp,
for example : "./ressources/Model.bmp"
Look at chapter II.e for more possibilities with textures.

You can add as many GameObject as you wish, they will all be drawn with the draw() call.

    d. Differents objects, different uses.

In the same idea, you can create GameUIObject, requiring a picture, that will be put on
screen as a 2d element over the 3d objects (An UI picture in short).

And then, you can add GameTextObject elements, which will put text on the screen, as 2D
elements as well, and which will be on top of the ui elements.

These classes are used very similarly to the base GameObject, with these constructors:

    GameUIObject(std::string name, std::string imgPath);

    GameTextObject(std::string name, std::string text);


With these three classes, you can start making games, as their glm::vec3 Position, Rotation, and Scale
can be modified, and will be reflected in the draw() calls.

The goal of this engine is to handle every window drawing related calls, and allow to have an overlay of class elements
that can be easily put on the screen and modified through code.

    e. Texturing the objects on runtime.

When a GameObject is instanciated, the engine will try to load the same name of .obj but with .bmp extension
to load a default texture. This is useful if you have obj1.obj and in the same folder obj1.bmp.
It does an automatic texture loading.

However, games may require the texture to be changed on the spot. This means we must change the texture in our objects.
Inside the GameObject, or any textured object, there is a Texture component, allowing
easy texture handling:

    GameObject *Character = new GameObject("Character", "./ressources/Model.obj");

    Character->Texture.Load("./ressources/newTexture.bmp");

This way of changing the texture will parse the new file you give it. It is cool, sure, but if you call it several times,
it will create performance problems.
There is the right way to do it if you want to stock multiple textures in some sort of pool:

    GameObject      *Character = new GameObject("Character", "./ressources/Model.obj");

    t_bmp_texture   new_texture_1;
    t_bmp_texture   new_texture_2;

    GameEngineController::LoadTextureFile(new_texture_1, "./ressources/new_texture.bmp");

    // if the obj already has a texture
    Character->Texture.Clear();
 
    Character->Texture.Swap(new_texture_1);
    ....
    Character->Texture.Swap(new_texture_2);

Know that if the character already has a texture and you swap over it, the previous texture will be a memory leak.
If you want to change the texture only once and want the previous texture leaked, you can also use Texture.Replace(t_bmp_texture *).

All this means that there are several methods for removing/replacing/swapping textures, that should be used according to case.
The goal here was to have all tools at hand to have either some simple texture loading, or to be able to make a pool of textures, swapped over during gameplay.

However, a shared pool of texture has been added to the engine. That means if you load several textures with the same path,
the texture will be reused. This reduces the overhead and the context changing, but it may cause memory corruption problems
when you free a texture. Be extra careful with freeing textures methods, that are Replace(), Clear(), Load(),
as they may destroy other objects' texture and cause some segfault.

    f. Collisions.

For now, the collisions must be handled gameplayside. However, every object has a BoundingBox component that is set from the smallest vertex
to the biggest vertex. Meaning you virtually have access to a square bounding box.
Note for thought: Ill surely turn this into a engine side collision system, with a flag system to activate/deactivate the collision
research, as it is a performance chokepoint.

III. Credits

- aleung-c (the author)
- Joey de Vries from learnopengl.com, particularly https://learnopengl.com/#!In-Practice/Text-Rendering.
- http://www.opengl-tutorial.org/, for their simple bmp loader.
- OpenGL
- GLFW
- Freetype2
- GLM
